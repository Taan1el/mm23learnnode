"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ImportWrapper = void 0;

var _getStringBase64Hash = require("../utils/get-string-base64-hash");

var _toRegexpSource = require("../utils/to-regexp-source");

var _unquote = require("../utils/unquote");

var _ImportLiteral = require("./ImportLiteral");

var _ImportSymbol = require("./ImportSymbol");

var _getType = require("./get-type");

var _isSymbol = require("./is-symbol");

var _optimizeImportLiterals = require("./optimize-import-literals");

var _throwNotSymbolOrLiteral = require("./throw-not-symbol-or-literal");

function setImportValue(instance, importValue) {
  instance.importValue = importValue;
  instance._optimizedImportValue = (0, _optimizeImportLiterals.optimizeImportLiterals)(importValue);
}
/**
 * @typedef {(ImportLiteral | ImportSymbol)} ImportLiteralOrSymbol
 */

/**
 * Wrapper for manage import strings
 */


class ImportWrapper {
  constructor(importValue = []) {
    const value = [].concat(importValue);
    (0, _throwNotSymbolOrLiteral.throwNotSymbolOrLiteral)('ImportWrapper', value);
    this.importValue = null;
    this._optimizedImportValue = null;
    setImportValue(this, value);
  }
  /**
   * @param {ImportLiteralOrSymbol[]} value
   * @returns {ImportWrapper}
   */


  push(...value) {
    (0, _throwNotSymbolOrLiteral.throwNotSymbolOrLiteral)('ImportWrapper#push', value);
    setImportValue(this, [...this.importValue, ...value]);
    return this;
  }
  /**
   * @param {...string} value
   * @returns {ImportWrapper}
   */


  addSymbol(...value) {
    return this.push(...value.map(value => new _ImportSymbol.ImportSymbol(value)));
  }
  /**
   * @param {...string} value
   * @returns {ImportWrapper}
   */


  addLiteral(...value) {
    return this.push(...value.map(value => new _ImportLiteral.ImportLiteral(value)));
  }
  /**
   * @returns {ImportLiteralOrSymbol}
   */


  shift() {
    const [item, ...importValue] = this.importValue;
    setImportValue(this, importValue);
    return item;
  }
  /**
   * @param {...ImportLiteralOrSymbol} value
   * @returns {ImportWrapper}
   */


  unshift(...value) {
    if (value.length === 0) {
      return this;
    }

    (0, _throwNotSymbolOrLiteral.throwNotSymbolOrLiteral)('ImportWrapper#unshift', value);
    setImportValue(this, [...value, ...this.importValue]);
    return this;
  }
  /**
   * @param {...ImportLiteralOrSymbol} value
   * @returns {ImportWrapper}
   */


  concat(...value) {
    return new ImportWrapper([...this.importValue, ...value]);
  }

  map(callback) {
    return new ImportWrapper(this.importValue.map(callback));
  }
  /**
   * @param {string} str
   * @returns {boolean}
   */


  startsWith(str) {
    const [item] = this._optimizedImportValue;

    if ((0, _getType.getType)(item) !== 'ImportLiteral' || item === void 0) {
      return false;
    }

    return item.value.startsWith(str);
  }

  isDynamic() {
    return this.importValue.some(_isSymbol.isSymbol);
  }

  getHash() {
    return (0, _getStringBase64Hash.getStringBase64Hash)(this.toString());
  }
  /**
   * @returns {string}
   */


  toString() {
    const string = this.importValue.join(' + ');

    if (this.isDynamic()) {
      return string;
    }

    if (this.importValue.length === 1) {
      return (0, _unquote.unquote)(string);
    }

    return string;
  }
  /**
   * @returns {string}
   */


  toGlob() {
    return this.importValue.reduce(function toGlob(glob, item) {
      if (!glob) {
        return item.toGlob();
      }

      return `${glob}${item.toGlob()}`;
    }, '');
  }
  /**
   * List of all dynamic parts values
   *
   * @returns {string[]}
   */


  toArgs() {
    return this.importValue.filter(_isSymbol.isSymbol).map(function toValue(item) {
      return item.valueOf();
    });
  }

  toRegExp() {
    const regexpSource = this.importValue.reduce(function (regex, value) {
      let valueRegexp;

      if ((0, _isSymbol.isSymbol)(value)) {
        valueRegexp = '(.+)';
      } else {
        valueRegexp = (0, _toRegexpSource.toRegExpSource)(value.valueOf());
      }

      if (regex === '') {
        return valueRegexp;
      }

      return `${regex}${valueRegexp}`;
    }, '');
    return new RegExp(`${regexpSource}$`);
  }

}

exports.ImportWrapper = ImportWrapper;