"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.doTransform = doTransform;

var _hasAsyncTags = require("./ast/has-async-tags");

var _getLoaderOutput = require("./output/get-loader-output");

var _getTemplateImports = require("./output/get-template-imports");

var _configureEnvironment = require("./precompile/configure-environment");

var _getUsedDependencies = require("./precompile/get-used-dependencies");

var _loadDependencies = require("./precompile/load-dependencies");

var _precompileToLocalVar = require("./precompile/precompile-to-local-var");

const staticExtensionPath = require.resolve('./static-extension/get-static-extension');

async function doTransform(source, loaderContext, {
  resourcePathImport,
  options,
  normalizedSearchPaths
}) {
  var _options$dev;

  const nunjucksOptions = {
    // https://mozilla.github.io/nunjucks/api.html#configure
    autoescape: options.autoescape,
    throwOnUndefined: options.throwOnUndefined,
    trimBlocks: options.trimBlocks,
    lstripBlocks: options.lstripBlocks,
    tags: options.tags,
    dev: (_options$dev = options.dev) !== null && _options$dev !== void 0 ? _options$dev : loaderContext.mode === 'development'
  };
  const {
    nodes,
    extensions: extensionsInstances,
    filters: filtersInstances
  } = await (0, _loadDependencies.loadDependencies)(source, {
    StaticExtension: staticExtensionPath,
    ...options.extensions
  }, options.filters, nunjucksOptions);
  const {
    assets,
    templates: dependencies,
    globals,
    extensions,
    filters
  } = await (0, _getUsedDependencies.getUsedDependencies)(loaderContext, nodes, extensionsInstances, filtersInstances, { ...options,
    searchPaths: normalizedSearchPaths
  });
  const envOptions = JSON.stringify({ ...nunjucksOptions,
    // Loader specific options
    jinjaCompat: options.jinjaCompat,
    isAsyncTemplate: (0, _hasAsyncTags.hasAsyncTags)(nodes)
  });
  const outputImports = (0, _getTemplateImports.getTemplateImports)(loaderContext, options.esModule, {
    assets,
    dependencies,
    extensions,
    filters,
    globals
  });
  const env = (0, _configureEnvironment.configureEnvironment)({
    searchPaths: normalizedSearchPaths,
    options: nunjucksOptions,
    extensions: extensionsInstances,
    filters: filtersInstances
  });
  const outputPrecompiled = (0, _precompileToLocalVar.precompileToLocalVar)(source, resourcePathImport, env);
  const outputExport = options.esModule ? 'export default' : 'exports = module.exports =';
  return (0, _getLoaderOutput.getLoaderOutput)({
    templateImport: JSON.stringify(resourcePathImport),
    imports: outputImports,
    precompiled: outputPrecompiled,
    envOptions,
    defaultExport: outputExport
  });
}