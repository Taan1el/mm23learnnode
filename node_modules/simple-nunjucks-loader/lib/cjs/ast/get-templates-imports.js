"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getTemplatesImports = getTemplatesImports;

var _getFirstExistedPath = require("../utils/get-first-existed-path");

var _getPossiblePaths = require("../utils/get-possible-paths");

var _isUniqueTemplate = require("../utils/is-unique-template");

var _getDependenciesTemplates = require("./get-dependencies-templates");

/**
 * Find first existed path
 *
 * @param {string} path
 * @param {ImportWrapper[]} paths
 * @returns {Promise<string[]>}
 */
async function filterPaths([path, paths]) {
  try {
    const importPath = await (0, _getFirstExistedPath.getFirstExistedPath)(paths);
    return [path, importPath];
  } catch {
    throw new Error(`Template "${path}" not found`);
  }
}

function filterUniqueTemplates(templates) {
  return templates.filter(_isUniqueTemplate.isUniqueTemplate);
}
/**
 * @param {Object} loaderContext
 * @param {nunjucks.nodes.Root} nodes
 * @param {string[]}            searchPaths
 * @returns {Promise<[string, ImportWrapper][]>}
 */


function getTemplatesImports(loaderContext, nodes, searchPaths) {
  const templateDeps = (0, _getDependenciesTemplates.getDependenciesTemplates)(nodes).filter(function (dep) {
    if (dep instanceof Error) {
      loaderContext.emitWarning(dep);
      return false;
    }

    return true;
  });
  const possiblePaths = (0, _getPossiblePaths.getPossiblePaths)(templateDeps, searchPaths);
  const resolvedTemplates = possiblePaths.map(filterPaths);
  return Promise.all(resolvedTemplates).then(filterUniqueTemplates);
}