"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAssets = getAssets;

var _nunjucks = _interopRequireDefault(require("nunjucks"));

var _constants = require("../constants");

var _ImportWrapper = require("../import-wrapper/ImportWrapper");

var _StaticExtension = require("../static-extension/StaticExtension");

var _getFirstExistedPath = require("../utils/get-first-existed-path");

var _getPossiblePaths = require("../utils/get-possible-paths");

var _isUniqueAsset = require("../utils/is-unique-asset");

var _getAddNodeValue = require("./get-add-node-value");

var _getNodesValues = require("./get-nodes-values");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @param {nunjucks.nodes.Node} node
 * @param {Function}            ExtensionClass
 * @return {boolean}
 */
function isExtension(node, ExtensionClass) {
  return node.extName instanceof ExtensionClass || node.extName === ExtensionClass.name;
}

function getNodeValue(node) {
  if (!isExtension(node, _StaticExtension.StaticExtension)) {
    return;
  }

  const [asset] = node.args.children;

  if (asset instanceof _nunjucks.default.nodes.Add) {
    return (0, _getAddNodeValue.getAddNodeValue)(asset);
  }

  const value = new _ImportWrapper.ImportWrapper();

  if (asset instanceof _nunjucks.default.nodes.Symbol) {
    value.addSymbol(asset.value);
  }

  if (asset instanceof _nunjucks.default.nodes.Literal) {
    value.addLiteral(asset.value);
  }

  return value;
}

async function filterPaths([path, paths]) {
  try {
    const importPath = await (0, _getFirstExistedPath.getFirstExistedPath)(paths);
    return [path, importPath];
  } catch (error) {
    if (error.code !== _constants.ERROR_MODULE_NOT_FOUND) {
      throw new Error(`Asset "${path}" not found`);
    }

    throw error;
  }
}
/**
 * @param {nunjucks.nodes.Root} nodes
 * @param {string|string[]}     searchAssets
 * @returns {Promise<[ImportWrapper, ImportWrapper][]>}
 */


function getAssets(nodes, searchAssets) {
  const assets = (0, _getNodesValues.getNodesValues)(nodes, _nunjucks.default.nodes.CallExtensionAsync, getNodeValue).filter(_isUniqueAsset.isUniqueAsset);
  const possiblePaths = (0, _getPossiblePaths.getPossiblePaths)(assets, [].concat(searchAssets));
  const resolvedAssets = possiblePaths.map(filterPaths);
  return Promise.all(resolvedAssets);
}