"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAddonsMeta = getAddonsMeta;

var _getModule = require("../utils/get-module");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @param {[string, string]} addonEntry
 * @return {Promise<[string, string, function]>}
 */
async function loadAddon([name, importPath]) {
  const instance = await Promise.resolve(`${importPath}`).then(s => _interopRequireWildcard(require(s)));
  return [name, importPath, (0, _getModule.getModule)(instance)];
}
/**
 * @param {Array.<string[]>} addonEntries
 * @returns {Promise<Array[]>}
 */


function getAddonsMeta(addonEntries) {
  const entries = addonEntries.map(loadAddon);
  return Promise.all(entries);
}