"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getUsedDependencies = getUsedDependencies;

var _getAssets = require("../ast/get-assets");

var _getTemplatesImports = require("../ast/get-templates-imports");

var _getUsedExtensions = require("../ast/get-used-extensions");

var _getUsedFilters = require("../ast/get-used-filters");

var _getUsedGlobals = require("../ast/get-used-globals");

/**
 * @typedef {Object} NunjucksOptions
 * @property {boolean}                 [autoescape=true]
 * @property {boolean}                 [throwOnUndefined=false]
 * @property {boolean}                 [trimBlocks=false]
 * @property {boolean}                 [lstripBlocks=false]
 * @property {Object.<string, string>} [tags]
 * @property {string}                  [templatesPath]
 */

/**
 * @typedef {Object} TemplatePossiblePaths
 * @property {string}   name
 * @property {string[]} paths
 */

/**
 * @typedef {Object} PrecompiledDependencyLink
 * @property {string} originalName Name as it appear in template
 * @property {string} fullPath     Resolved absolute path
 */

/**
 * @typedef {Object} PrecompiledDependency
 * @property {string}                      precompiled
 * @property {PrecompiledDependencyLink[]} dependencies
 */

/**
 * @param {Object} loaderContext
 * @param {nunjucks.nodes.Root} nodes
 * @param {InstancesList} extensions
 * @param {InstancesList} filters
 * @param {Object} loaderOptions
 * @returns {Promise<Object>}
 */
async function getUsedDependencies(loaderContext, nodes, extensions, filters, loaderOptions) {
  const {
    searchPaths,
    assetsPaths,
    globals
  } = loaderOptions;
  const [templates, assets] = await Promise.all([(0, _getTemplatesImports.getTemplatesImports)(loaderContext, nodes, searchPaths), (0, _getAssets.getAssets)(nodes, assetsPaths)]);
  return {
    templates,
    globals: (0, _getUsedGlobals.getUsedGlobals)(nodes, globals),
    extensions: (0, _getUsedExtensions.getUsedExtensions)(nodes, extensions),
    filters: (0, _getUsedFilters.getUsedFilters)(nodes, filters),
    assets
  };
}